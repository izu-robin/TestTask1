В программе есть два режима работы - для менеджера и для рядового работника. Выбор происходит в момент авторизации и зависит от типа учетной записи, которая активна в данный момент. 
Сейчас в базе данных 1 менеджер (логин: manager1, пароль: mn) и два работника (1; логин: worker1, пароль: wr1) и (2; логин: worker2, пароль: wr2).
Менеджер может создавать новых пользователей, как работников, так и менеджеров. 

Все действия можно просмотреть в меню действий (команда [7] для менеджера и [3] для работника). Добавлены валидаторы и контроль вводимых данных, обработаны исключения. 

Менеджеры могут: регистрировать пользователей, создавать задачи, менять уже существующим задачам назначенного работника, удалять задачи, удалять пользователей, просматривать все задачи, всех работников, журнал действий работников и список собственных команд.
Сотрудники могут: просматривать назначенные им задачи, изменять их статус и вызвать список доступных команд. 
При необходимости можно продолжить работу над этой программой и добавить вывод задач по статусам (добавляя к SQL SELECT запросу фильтры "WHERE Tasks.Status=1" 1 для задач "In progress", 2 для "Done", 0 для "To do").

Все изменения статусов задач работников сохраняются в базе данных, там же ведется история изменений с указанием времени и автора изменений. 
Удаление пользователя также удаляет все записи о его прошлых действиях.

Работа с программой завершается по последней команде ([10] у менеджера и [4] у работника).

О паттернах. 
SOLID: 
  Принцип единственной ответственности - классы Manager и Worker хранят данные и методы, которые специфичны именно для  них. Для всех операций, связанных с обращением к базе данных, создан класс DBDataAccess, он содержит только методы, напрямую обращающиеся к базе данных. 
  Принцип открытости/закрытости - можно добавлять дургие типы работников, расширяя систему.
  Принцип подстановки Барбары Лисков - объекты классов Manager и Worker наследуются от класса Employee и могут заменять его. 
  Принцип разделения интерфейсов - интерфейсы работника и менеджера содержат только те методы, которые необходимы именно им. 
  Принцип инверсии зависимости - это тот пункт, над которым можно поработать побольше, чтобы сделать систему менее зависимой от низкоуровневых модулей. 

Другие паттерны:
  Factory - для создания пользователя, и в классе фабрики он определяется либо как Worker, либо как Manager.
  Singleton - для создания и хранения одной строки подключения к базе данных. 
  Dependency Injection - знаю, но не придумала где его здесь реализовать, по крайней мере в той версии решения задачи, которая сложилось у меня. 
